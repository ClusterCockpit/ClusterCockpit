type Job {
  id: ID!
  jobId: String!
  userId: String!
  projectId: String!
  clusterId: String!
  startTime: Time!
  duration: Int!
  numNodes: Int!
  hasProfile: Boolean!
  state: JobState!
  tags: [JobTag!]!

  loadAvg: Float
  memUsedMax: Float
  flopsAnyAvg: Float
  memBwAvg: Float
  netBwAvg: Float
  fileBwAvg: Float
}

enum JobState {
  running
  completed
}

type JobTag {
  id: ID!
  tagType: String!
  tagName: String!
}

type Cluster {
  clusterID: String!
  processorType: String!
  socketsPerNode: Int!
  coresPerSocket: Int!
  threadsPerCore: Int!
  flopRateScalar: Int!
  flopRateSimd: Int!
  memoryBandwidth: Int!
  metricConfig: [MetricConfig!]!
  filterRanges: FilterRanges!
}

type MetricConfig {
  name: String!
  unit: String!
  sampletime: Int!
  peak: Int!
  normal: Int!
  caution: Int!
  alert: Int!
}

type JobMetric {
  unit: String!
  scope: JobMetricScope!
  timestep: Int!
  series: [JobMetricSeries]!
}

enum JobMetricScope {
  node
  cpu
  socket
}

type JobMetricSeries {
  node_id: String!
  statistics: JobMetricStatistics
  data: [Float]!
}

type JobMetricStatistics {
  avg: Float!
  min: Float!
  max: Float!
}

type JobMetricWithName {
  name: String!
  metric: JobMetric!
}

type MetricFootprints {
  name: String!
  footprints: [Float]!
}

enum Aggregate { USER, PROJECT, CLUSTER }

type NodeMetric {
  name: String!
  data: [Float]!
}

type NodeMetrics {
  id:      String!
  metrics: [NodeMetric!]!
}

type Query {
  clusters: [Cluster!]!
  tags: [JobTag!]!

  job(id: ID!): Job
  jobMetrics(id: ID!, metrics: [String]): [JobMetricWithName]!

  jobs(filter: [JobFilter!]!, page: PageRequest, order: OrderByInput): JobResultList!
  jobsStatistics(filter: [JobFilter!]!, groupBy: Aggregate): [JobsStatistics!]!
  jobsFootprints(filter: [JobFilter!]!, metrics: [String]!): [MetricFootprints]!

  rooflineHeatmap(filter: [JobFilter!]!, rows: Int!, cols: Int!, minX: Float!, minY: Float!, maxX: Float!, maxY: Float!): [[Float!]]!

  # Return NodeMetrics with data from `from` to `to`.
  # If nodes is null, return data for all nodes.
  # If metrics is null, return data for all metrics.
  nodeMetrics(cluster: ID!, nodes: [String!], metrics: [String!], from: Time!, to: Time!): [NodeMetrics!]!
}

type Mutation {
  createTag(type: String!, name: String!): JobTag!
  deleteTag(id: ID!): ID!
  addTagsToJob(job: ID!, tagIds: [ID!]!): [JobTag!]!
  removeTagsFromJob(job: ID!, tagIds: [ID!]!): [JobTag!]!

  updateConfiguration(name: String!, value: String!): String
}

type IntRangeOutput {
  from: Int!
  to: Int!
}

type TimeRangeOutput {
  from: Time!
  to: Time!
}

type FilterRanges {
  duration: IntRangeOutput!
  numNodes: IntRangeOutput!
  startTime: TimeRangeOutput!
}

input JobFilter {
  tags: [ID!]
  jobId: StringInput
  userId: StringInput
  projectId: StringInput
  clusterId: StringInput
  duration: IntRange
  numNodes: IntRange
  startTime: TimeRange
  isRunning: Boolean
  flopsAnyAvg: FloatRange
  memBwAvg: FloatRange
  loadAvg: FloatRange
  memUsedMax: FloatRange
}

input OrderByInput {
  field: String!
  order: SortDirectionEnum = ASC
}

enum SortDirectionEnum {
  DESC
  ASC
}

input StringInput {
  eq: String
  contains: String
  startsWith: String
  endsWith: String
}

input IntRange {
  from: Int!
  to: Int!
}

input FloatRange {
  from: Float!
  to: Float!
}

input TimeRange {
  from: Time
  to: Time
}

type JobResultList {
  items: [Job]!
  offset: Int
  limit: Int
  count: Int
}

type HistoPoint {
  count: Int!
  value: Int!
}

type JobsStatistics  {
  id: ID!
  totalJobs: Int!
  shortJobs: Int!
  totalWalltime: Int!
  totalCoreHours: Int!
  histWalltime: [HistoPoint]!
  histNumNodes: [HistoPoint]!
}

input PageRequest {
  itemsPerPage: Int!
  page: Int!
}

scalar Time
