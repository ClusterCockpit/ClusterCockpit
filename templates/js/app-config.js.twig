document.querySelectorAll("button").forEach( button => {
    button.addEventListener("click", async (e) => {
        let id, action, value, validation, re;
        try {
          e.preventDefault();
          id = "#"+ e.target.getAttribute("value");
          action = e.target.getAttribute("name");
          value = document.querySelector(id).value;
          // validation = document.querySelector(id).getAttribute("data-validation");
          // re = new RegExp(validation);

          // if ( ! re.test(value) ) {
          //     document.querySelector(id).addClass('is-invalid');
          //     return;
          // }

          let payload = {
              name: document.querySelector(id).getAttribute("id"),
              value: value,
              scope: '{{ scope }}'
          };

          let response = await fetch("{{ app.request.schemeAndHttpHost ~ app.request.baseUrl }}/api/configurations/"+e.target.getAttribute("id"), {
              method: 'GET',
              mode: 'cors', // no-cors, *cors, same-origin
              credentials: 'same-origin', // include, *same-origin, omit
              headers: {
                  'content-type': 'application/json'
              },
          })

          // The promise returned by response.json()
          // will be rejected if the response was not ok,
          // so await will throw an error in that case.
          let data = await response.json();
          payload.label = data.label;
          payload.validation = data.validation;
          payload.feedback = data.feedback;

          if ( action == 'update' ) {
               response = await fetch("{{ app.request.schemeAndHttpHost ~ app.request.baseUrl }}/api/configurations/"+e.target.getAttribute("id"), {
                   method: 'PATCH',
                   mode: 'cors', // no-cors, *cors, same-origin
                   credentials: 'same-origin', // include, *same-origin, omit
                   headers: {
                       'Content-Type': 'application/merge-patch+json'
                   },
                   body: JSON.stringify(payload) // body data type must match "Content-Type" header
               })
          } else if ( action == 'reset' ) {
               response = await fetch("{{ app.request.schemeAndHttpHost ~ app.request.baseUrl }}/api/configurations/"+e.target.getAttribute("id"), {
                   method: 'DELETE',
                   mode: 'cors', // no-cors, *cors, same-origin
                   credentials: 'same-origin', // include, *same-origin, omit
               })
          } else if ( action == 'replace' ) {
               response = await fetch("{{ app.request.schemeAndHttpHost ~ app.request.baseUrl }}/api/configurations", {
                   method: 'POST',
                   mode: 'cors', // no-cors, *cors, same-origin
                   credentials: 'same-origin', // include, *same-origin, omit
                   headers: {
                       'content-type': 'application/json'
                   },
                   body: JSON.stringify(payload) // body data type must match "Content-Type" header
               })
          }

          if (!response.ok)
            throw new Error("Unexpected response status code: " + response.status);

          document.querySelector(id+"-help").textContent = "Success!";
          document.querySelector(id+"-help").classList.remove("invisible");
        } catch (e) {
          console.log(e);
          document.querySelector(id+"-help").textContent = "Error!";
          document.querySelector(id+"-help").classList.remove("invisible");
        }
    })
});

